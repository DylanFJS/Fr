/*
 * Copyright (c) 2016-2024 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input } from '@angular/core';
import { Keys } from '../../../utils/enums/keys.enum';
import { ClrKeyFocus } from './key-focus';
import * as i0 from "@angular/core";
export class ClrRovingTabindex extends ClrKeyFocus {
    constructor(elementRef, renderer) {
        super(elementRef);
        this.renderer = renderer;
        this.disabled = false;
    }
    // Proxy the input, as the selector name from parent class will still be "clrKeyFocus".
    get rovingIndexItems() {
        return this.focusableItems;
    }
    set rovingIndexItems(elements) {
        this.focusableItems = elements;
    }
    set rovingTabindexDisabled(disabled) {
        this.disabled = disabled;
        if (this.currentItem) {
            this.setTabindex(this.currentItem, disabled ? -1 : 0);
        }
    }
    handleKeyboardEvent(event) {
        if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {
            this.updateTabindex(this.current - 1);
        }
        else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {
            this.updateTabindex(this.current + 1);
        }
        else if (event.code === Keys.Home) {
            this.updateTabindex(0);
        }
        else if (event.code === Keys.End) {
            this.updateTabindex(this.focusableItems.length - 1);
        }
        super.handleKeyboardEvent(event);
    }
    setClickedItemCurrent(event) {
        let position;
        if (this.focusableItems[0].nativeElement) {
            position = this.focusableItems.map(item => item.nativeElement).indexOf(event.target);
        }
        else {
            position = this.focusableItems.indexOf(event.target);
        }
        if (position > -1) {
            this.updateTabindex(position);
        }
        super.setClickedItemCurrent(event);
    }
    initializeFocus() {
        if (this.focusableItems && this.focusableItems.length) {
            this.focusableItems.forEach(item => {
                this.setTabindex(item, -1);
            });
            // It is possible that the focus was on an element, whose index is no longer available.
            // This can happen when some of the focusable elements are being removed.
            // In such cases, the new focus is initialized on the last focusable element.
            if (this.current >= this.focusableItems.length) {
                this.current = this.focusableItems.length - 1;
            }
            if (!this.disabled && this.currentItem) {
                this.setTabindex(this.currentItem, 0);
            }
        }
        super.initializeFocus();
    }
    updateTabindex(newIndex) {
        this.setTabindex(this.currentItem, -1);
        this.setTabindex(this.focusableItems[newIndex], 0);
    }
    setTabindex(item, value) {
        if (item instanceof HTMLElement) {
            this.renderer.setAttribute(item, 'tabindex', value.toString());
        }
        else {
            this.renderer.setAttribute(item.nativeElement, 'tabindex', value.toString());
        }
    }
}
ClrRovingTabindex.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrRovingTabindex, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
ClrRovingTabindex.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.2", type: ClrRovingTabindex, selector: "[clrRovingTabindex]", inputs: { rovingIndexItems: ["clrRovingTabindex", "rovingIndexItems"], rovingTabindexDisabled: ["clrRovingTabindexDisabled", "rovingTabindexDisabled"] }, usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrRovingTabindex, decorators: [{
            type: Component,
            args: [{
                    selector: '[clrRovingTabindex]',
                    template: '<ng-content></ng-content>',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { rovingIndexItems: [{
                type: Input,
                args: ['clrRovingTabindex']
            }], rovingTabindexDisabled: [{
                type: Input,
                args: ['clrRovingTabindexDisabled']
            }] } });
//# sourceMappingURL=data:application/json;base64,