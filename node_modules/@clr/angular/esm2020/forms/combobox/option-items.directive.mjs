/*
 * Copyright (c) 2016-2024 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { NgForOf } from '@angular/common';
import { Directive, Input, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./providers/option-selection.service";
import * as i2 from "../../utils/popover/providers/popover-position.service";
export class ClrOptionItems {
    constructor(template, differs, optionService, positionService, vcr) {
        this.template = template;
        this.differs = differs;
        this.optionService = optionService;
        this.positionService = positionService;
        this.vcr = vcr;
        this.subscriptions = [];
        this.filter = '';
        this.differ = null;
        this.iterableProxy = new NgForOf(this.vcr, this.template, this.differs);
        this.subscriptions.push(optionService.inputChanged.subscribe(filter => {
            this.filter = filter;
            this.updateItems();
        }));
    }
    set rawItems(items) {
        this._rawItems = items ? items : [];
        this.updateItems();
    }
    set trackBy(value) {
        this.iterableProxy.ngForTrackBy = value;
    }
    set field(field) {
        this._filterField = field;
        this.optionService.displayField = field;
    }
    ngDoCheck() {
        if (!this.differ) {
            this.differ = this.differs.find(this.filteredItems).create(this.iterableProxy.ngForTrackBy);
        }
        if (this.differ) {
            const changes = this.differ.diff(this.filteredItems);
            if (changes) {
                this.iterableProxy.ngDoCheck();
                this.positionService.realign();
            }
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    updateItems() {
        if (!this._rawItems || this.filter === undefined || this.filter === null) {
            return;
        }
        const normalizedFilterValue = normalizeValue(this.filter);
        if (this.optionService.showAllOptions) {
            this.filteredItems = this._rawItems;
        }
        else if (this._filterField) {
            this.filteredItems = this._rawItems.filter(item => {
                const objValue = item[this._filterField];
                return objValue ? normalizeValue(objValue).includes(normalizedFilterValue) : false;
            });
        }
        else {
            // Filter by all item object values
            this.filteredItems = this._rawItems.filter(item => {
                if (typeof item !== 'object') {
                    return normalizeValue(item).includes(normalizedFilterValue);
                }
                const objValues = Object.values(item).filter(value => {
                    return value !== null && value !== undefined ? normalizeValue(value).includes(normalizedFilterValue) : false;
                });
                return objValues.length > 0;
            });
        }
        this.iterableProxy.ngForOf = this.filteredItems;
    }
}
ClrOptionItems.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrOptionItems, deps: [{ token: i0.TemplateRef }, { token: i0.IterableDiffers }, { token: i1.OptionSelectionService }, { token: i2.ClrPopoverPositionService }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive });
ClrOptionItems.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: ClrOptionItems, selector: "[clrOptionItems][clrOptionItemsOf]", inputs: { rawItems: ["clrOptionItemsOf", "rawItems"], trackBy: ["clrOptionItemsTrackBy", "trackBy"], field: ["clrOptionItemsField", "field"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrOptionItems, decorators: [{
            type: Directive,
            args: [{
                    selector: '[clrOptionItems][clrOptionItemsOf]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef }, { type: i0.IterableDiffers }, { type: i1.OptionSelectionService }, { type: i2.ClrPopoverPositionService }, { type: i0.ViewContainerRef }]; }, propDecorators: { rawItems: [{
                type: Input,
                args: ['clrOptionItemsOf']
            }], trackBy: [{
                type: Input,
                args: ['clrOptionItemsTrackBy']
            }], field: [{
                type: Input,
                args: ['clrOptionItemsField']
            }] } });
function normalizeValue(value) {
    return value
        .toString()
        .normalize('NFD')
        .replace(/\p{Diacritic}/gu, '')
        .toLowerCase();
}
//# sourceMappingURL=data:application/json;base64,