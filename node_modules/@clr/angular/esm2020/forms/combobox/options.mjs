/*
 * Copyright (c) 2016-2024 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT } from '@angular/common';
import { Component, ContentChildren, Inject, Input, Optional, } from '@angular/core';
import { fromEvent } from 'rxjs';
import { POPOVER_HOST_ANCHOR } from '../../popover/common/popover-host-anchor.token';
import { IF_ACTIVE_ID } from '../../utils/conditional/if-active.service';
import { ClrLoadingState } from '../../utils/loading/loading';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ClrOption } from './option';
import * as i0 from "@angular/core";
import * as i1 from "./providers/option-selection.service";
import * as i2 from "../../utils/i18n/common-strings.service";
import * as i3 from "./providers/combobox-focus-handler.service";
import * as i4 from "../../utils/popover/providers/popover-toggle.service";
import * as i5 from "@angular/common";
import * as i6 from "../../progress/spinner/spinner";
let nbOptionsComponents = 0;
export class ClrOptions {
    constructor(optionSelectionService, id, el, commonStrings, focusHandler, toggleService, parentHost, document) {
        this.optionSelectionService = optionSelectionService;
        this.id = id;
        this.el = el;
        this.commonStrings = commonStrings;
        this.focusHandler = focusHandler;
        this.toggleService = toggleService;
        this.document = document;
        this.loading = false;
        this.subscriptions = [];
        if (!parentHost) {
            throw new Error('clr-options should only be used inside of a clr-combobox');
        }
        if (!this.optionsId) {
            this.optionsId = 'clr-options-' + nbOptionsComponents++;
        }
    }
    get items() {
        return this._items;
    }
    set items(items) {
        this._items = items;
        this.focusHandler.addOptionValues(this._items.map(option => option.optionProxy));
    }
    /**
     * Tests if the list of options is empty, meaning it doesn't contain any items
     */
    get emptyOptions() {
        return !this.optionSelectionService.loading && this.items.length === 0;
    }
    get noResultsElementId() {
        return `${this.optionsId}-no-results`;
    }
    ngAfterViewInit() {
        this.focusHandler.listbox = this.el.nativeElement;
        this.subscriptions.push(fromEvent(this.document, 'scroll', { capture: true }).subscribe(event => {
            if (this.toggleService.open &&
                event.target !== this.el.nativeElement &&
                event.target !== this.focusHandler.textInput) {
                this.toggleService.open = false;
            }
        }), this.items.changes.subscribe(items => {
            if (items.length) {
                setTimeout(() => {
                    this.focusHandler.focusFirstActive();
                });
            }
            else {
                this.focusHandler.pseudoFocus.pop();
            }
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    searchText(input) {
        return this.commonStrings.parse(this.commonStrings.keys.comboboxSearching, { INPUT: input });
    }
    loadingStateChange(state) {
        this.loading = state === ClrLoadingState.LOADING;
    }
}
ClrOptions.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrOptions, deps: [{ token: i1.OptionSelectionService }, { token: IF_ACTIVE_ID }, { token: i0.ElementRef }, { token: i2.ClrCommonStringsService }, { token: i3.ComboboxFocusHandler }, { token: i4.ClrPopoverToggleService }, { token: POPOVER_HOST_ANCHOR, optional: true }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Component });
ClrOptions.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.2", type: ClrOptions, selector: "clr-options", inputs: { optionsId: ["id", "optionsId"] }, host: { properties: { "class.clr-combobox-options": "true", "attr.role": "\"listbox\"", "id": "optionsId" } }, providers: [{ provide: LoadingListener, useExisting: ClrOptions }], queries: [{ propertyName: "items", predicate: ClrOption }], ngImport: i0, template: `
    <div *ngIf="optionSelectionService.loading" class="clr-combobox-options-loading">
      <clr-spinner clrInline>
        {{ commonStrings.keys.loading }}
      </clr-spinner>
      <span class="clr-combobox-options-text">
        {{ searchText(optionSelectionService.currentInput) }}
      </span>
    </div>

    <!-- Rendered if data set is empty -->
    <div *ngIf="emptyOptions" [id]="noResultsElementId" role="option">
      <span class="clr-combobox-options-empty-text">
        {{ commonStrings.keys.comboboxNoResults }}
      </span>
    </div>

    <!--Option Groups and Options will be projected here-->
    <ng-content></ng-content>
  `, isInline: true, dependencies: [{ kind: "directive", type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i6.ClrSpinner, selector: "clr-spinner", inputs: ["clrInline", "clrInverse", "clrSmall", "clrMedium"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: ClrOptions, decorators: [{
            type: Component,
            args: [{
                    selector: 'clr-options',
                    template: `
    <div *ngIf="optionSelectionService.loading" class="clr-combobox-options-loading">
      <clr-spinner clrInline>
        {{ commonStrings.keys.loading }}
      </clr-spinner>
      <span class="clr-combobox-options-text">
        {{ searchText(optionSelectionService.currentInput) }}
      </span>
    </div>

    <!-- Rendered if data set is empty -->
    <div *ngIf="emptyOptions" [id]="noResultsElementId" role="option">
      <span class="clr-combobox-options-empty-text">
        {{ commonStrings.keys.comboboxNoResults }}
      </span>
    </div>

    <!--Option Groups and Options will be projected here-->
    <ng-content></ng-content>
  `,
                    providers: [{ provide: LoadingListener, useExisting: ClrOptions }],
                    host: {
                        '[class.clr-combobox-options]': 'true',
                        '[attr.role]': '"listbox"',
                        '[id]': 'optionsId',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.OptionSelectionService }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [IF_ACTIVE_ID]
                }] }, { type: i0.ElementRef }, { type: i2.ClrCommonStringsService }, { type: i3.ComboboxFocusHandler }, { type: i4.ClrPopoverToggleService }, { type: i0.ElementRef, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [POPOVER_HOST_ANCHOR]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; }, propDecorators: { optionsId: [{
                type: Input,
                args: ['id']
            }], items: [{
                type: ContentChildren,
                args: [ClrOption]
            }] } });
//# sourceMappingURL=data:application/json;base64,