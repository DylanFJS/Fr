/*
 * Copyright (c) 2016-2024 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, HostBinding, HostListener, Input, KeyValueDiffers, } from '@angular/core';
import { HostWrapper } from '../../utils/host-wrapping/host-wrapper';
import { CONTROL_SUFFIX } from './abstract-control';
import { IfControlStateService } from './if-control-state/if-control-state.service';
import { ContainerIdService } from './providers/container-id.service';
import { ControlClassService } from './providers/control-class.service';
import { ControlIdService } from './providers/control-id.service';
import { MarkControlService } from './providers/mark-control.service';
import { NgControlService } from './providers/ng-control.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export var CHANGE_KEYS;
(function (CHANGE_KEYS) {
    CHANGE_KEYS["FORM"] = "form";
    CHANGE_KEYS["MODEL"] = "model";
})(CHANGE_KEYS || (CHANGE_KEYS = {}));
export class WrappedFormControl {
    // I lost way too much time trying to make this work without injecting the ViewContainerRef and the Injector,
    // I'm giving up. So we have to inject these two manually for now.
    constructor(vcr, wrapperType, injector, ngControl, renderer, el) {
        this.vcr = vcr;
        this.wrapperType = wrapperType;
        this.ngControl = ngControl;
        this.index = 0;
        this.subscriptions = [];
        this.renderer = renderer;
        this.el = el;
        if (injector) {
            this.ngControlService = injector.get(NgControlService, null);
            this.ifControlStateService = injector.get(IfControlStateService, null);
            this.controlClassService = injector.get(ControlClassService, null);
            this.markControlService = injector.get(MarkControlService, null);
            this.differs = injector.get(KeyValueDiffers, null);
        }
        if (this.controlClassService) {
            this.controlClassService.initControlClass(renderer, el.nativeElement);
        }
        if (this.markControlService) {
            this.subscriptions.push(this.markControlService.touchedChange.subscribe(() => {
                this.markAsTouched();
            }));
        }
        if (this.ngControlService) {
            this.subscriptions.push(this.ngControlService.helpersChange.subscribe((state) => {
                this.setAriaDescribedBy(state);
            }));
        }
        if (ngControl) {
            this.differ = this.differs.find(ngControl).create();
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
        if (this.controlIdService) {
            this.controlIdService.id = value;
        }
    }
    ngOnInit() {
        this._containerInjector = new HostWrapper(this.wrapperType, this.vcr, this.index);
        this.controlIdService = this._containerInjector.get(ControlIdService);
        /**
         * not all containers will provide `ContainerIdService`
         */
        this.containerIdService = this._containerInjector.get(ContainerIdService, null);
        if (this._id) {
            this.controlIdService.id = this._id;
        }
        else {
            this._id = this.controlIdService.id;
        }
        if (this.ngControlService && this.ngControl) {
            this.ngControlService.setControl(this.ngControl);
        }
    }
    ngDoCheck() {
        if (this.differ) {
            const changes = this.differ.diff(this.ngControl);
            if (changes) {
                changes.forEachChangedItem(change => {
                    if ((change.key === CHANGE_KEYS.FORM || change.key === CHANGE_KEYS.MODEL) &&
                        change.currentValue !== change.previousValue) {
                        this.triggerValidation();
                    }
                });
            }
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    triggerValidation() {
        if (this.ifControlStateService) {
            this.ifControlStateService.triggerStatusChange();
        }
    }
    // @TODO This method has a try/catch due to an unknown issue that came when building the clrToggle feature
    // We need to figure out why this fails for the ClrToggle scenario but works for Date picker...
    // To see the error, remove the try/catch here and run the ClrToggle suite to see issues getting the container
    // injector in time, and this ONLY HAPPENS in tests and not in dev/prod mode.
    getProviderFromContainer(token, notFoundValue) {
        try {
            return this._containerInjector.get(token, notFoundValue);
        }
        catch (e) {
            return notFoundValue;
        }
    }
    markAsTouched() {
        if (this.ngControl) {
            this.ngControl.control.markAsTouched();
            this.ngControl.control.updateValueAndValidity();
        }
    }
    setAriaDescribedBy(helpers) {
        if (helpers.show) {
            const ariaDescribedBy = this.getAriaDescribedById(helpers);
            if (ariaDescribedBy !== null) {
                this.renderer.setAttribute(this.el.nativeElement, 'aria-describedby', ariaDescribedBy);
                return;
            }
        }
        this.renderer.removeAttribute(this.el.nativeElement, 'aria-describedby');
    }
    getAriaDescribedById(helpers) {
        const elementId = this.containerIdService?.id || this.controlIdService?.id;
        /**
         * If ContainerIdService or ControlIdService are missing don't try to guess
         * Don't set anything.
         */
        if (!elementId) {
            return null;
        }
        /**
         * As the helper text is now always visible. If we have error/success then we should use both ids.
         */
        const describedByIds = [`${elementId}-${CONTROL_SUFFIX.HELPER}`];
        if (helpers.showInvalid) {
            describedByIds.push(`${elementId}-${CONTROL_SUFFIX.ERROR}`);
        }
        else if (helpers.showValid) {
            describedByIds.push(`${elementId}-${CONTROL_SUFFIX.SUCCESS}`);
        }
        return describedByIds.join(' ');
    }
}
WrappedFormControl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: WrappedFormControl, deps: [{ token: i0.ViewContainerRef }, { token: i0.Type }, { token: i0.Injector }, { token: i1.NgControl }, { token: i0.Renderer2 }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
WrappedFormControl.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "15.2.2", type: WrappedFormControl, inputs: { id: "id" }, host: { listeners: { "blur": "triggerValidation()" }, properties: { "id": "this.id" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.2", ngImport: i0, type: WrappedFormControl, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }, { type: i0.Type }, { type: i0.Injector }, { type: i1.NgControl }, { type: i0.Renderer2 }, { type: i0.ElementRef }]; }, propDecorators: { id: [{
                type: Input
            }, {
                type: HostBinding
            }], triggerValidation: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,