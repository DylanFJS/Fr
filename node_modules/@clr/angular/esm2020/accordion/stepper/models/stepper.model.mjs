/*
 * Copyright (c) 2016-2024 Broadcom. All Rights Reserved.
 * The term "Broadcom" refers to Broadcom Inc. and/or its subsidiaries.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { AccordionStatus } from '../../enums/accordion-status.enum';
import { AccordionModel } from '../../models/accordion.model';
export class StepperModel extends AccordionModel {
    constructor() {
        super(...arguments);
        this.stepperModelInitialize = false;
    }
    get allPanelsCompleted() {
        return this.panels.length && this.getNumberOfIncompletePanels() === 0 && this.getNumberOfOpenPanels() === 0;
    }
    get shouldOpenFirstPanel() {
        return !this.initialPanel || (this._panels && Object.keys(this._panels).length && !this._panels[this.initialPanel]);
    }
    addPanel(id, open = false) {
        super.addPanel(id, open);
        this._panels[id].disabled = true;
    }
    updatePanelOrder(ids) {
        super.updatePanelOrder(ids);
        if (this.stepperModelInitialize === false) {
            this.openFirstPanel();
        }
    }
    togglePanel(panelId) {
        if (this._panels[panelId].status === AccordionStatus.Complete) {
            this._panels[panelId].open = !this._panels[panelId].open;
        }
    }
    navigateToNextPanel(currentPanelId, currentPanelValid = true) {
        if (currentPanelValid) {
            this.completePanel(currentPanelId);
            this.openNextPanel(this._panels[currentPanelId].id);
        }
        else {
            this.setPanelError(currentPanelId);
        }
    }
    overrideInitialPanel(panelId) {
        this.initialPanel = panelId;
        this.panels
            .filter(() => this._panels[panelId] !== undefined)
            .forEach(panel => {
            if (panel.index < this._panels[panelId].index) {
                this.completePanel(panel.id);
            }
            else if (panel.id === panelId) {
                this._panels[panel.id].open = true;
            }
            else {
                this._panels[panel.id].open = false;
            }
        });
    }
    setPanelValid(panelId) {
        this._panels[panelId].status = AccordionStatus.Complete;
    }
    setPanelInvalid(panelId) {
        this._panels[panelId].status = AccordionStatus.Error;
    }
    setPanelsWithErrors(ids) {
        ids.forEach(id => this.setPanelError(id));
    }
    resetPanels() {
        /* return stepper to initialize state */
        this.stepperModelInitialize = false;
        this.panels.forEach(p => this.resetPanel(p.id));
        this.openFirstPanel();
    }
    getNextPanel(currentPanelId) {
        return this.panels.find(s => s.index === this._panels[currentPanelId].index + 1);
    }
    resetAllFuturePanels(panelId) {
        this.panels.filter(panel => panel.index >= this._panels[panelId].index).forEach(panel => this.resetPanel(panel.id));
    }
    resetPanel(panelId) {
        this._panels[panelId].status = AccordionStatus.Inactive;
        this._panels[panelId].open = false;
        this._panels[panelId].disabled = true;
    }
    openFirstPanel() {
        if (!this.shouldOpenFirstPanel) {
            return;
        }
        const firstPanel = this.getFirstPanel();
        /**
         * You need to call updatePanelOrder first to get the correct order,
         * else the list of panels will not have `index` set and we won't know
         * how to find the first panel.
         */
        if (!firstPanel) {
            return;
        }
        this._panels[firstPanel.id].open = true;
        this._panels[firstPanel.id].disabled = true;
        this.stepperModelInitialize = true;
    }
    completePanel(panelId) {
        this._panels[panelId].status = AccordionStatus.Complete;
        this._panels[panelId].disabled = false;
        this._panels[panelId].open = false;
    }
    openNextPanel(currentPanelId) {
        const nextPanel = this.getNextPanel(currentPanelId);
        if (nextPanel) {
            this.resetAllFuturePanels(nextPanel.id);
            this._panels[nextPanel.id].open = true;
            this._panels[nextPanel.id].disabled = true;
        }
    }
    setPanelError(panelId) {
        this.resetAllFuturePanels(panelId);
        this._panels[panelId].open = true;
        this._panels[panelId].status = AccordionStatus.Error;
    }
    getFirstPanel() {
        return this.panels.find(panel => panel.index === 0);
    }
    getNumberOfIncompletePanels() {
        return this.panels.reduce((prev, next) => (next.status !== AccordionStatus.Complete ? prev + 1 : prev), 0);
    }
    getNumberOfOpenPanels() {
        return this.panels.reduce((prev, next) => (next.open !== false ? prev + 1 : prev), 0);
    }
}
//# sourceMappingURL=data:application/json;base64,